
-- === Additions for Care Bundles, Check-ins, Consents, Audit ===

create table if not exists public.care_bundles (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  description text,
  active boolean not null default true,
  created_by uuid references public.profiles(id),
  created_at timestamptz not null default now()
);

create table if not exists public.bundle_steps (
  id uuid primary key default gen_random_uuid(),
  bundle_id uuid not null references public.care_bundles(id) on delete cascade,
  day_offset int not null,
  step_type text check (step_type in ('checkin','education','visit')) not null,
  payload jsonb not null default '{}'::jsonb
);

create table if not exists public.checkins (
  id uuid primary key default gen_random_uuid(),
  patient_id uuid not null references public.profiles(id) on delete cascade,
  doctor_id uuid references public.profiles(id) on delete set null,
  answers jsonb not null,
  triage_score int not null default 0,
  triage_flags text[] not null default '{}',
  created_at timestamptz not null default now()
);

create table if not exists public.consents (
  id uuid primary key default gen_random_uuid(),
  patient_id uuid not null references public.profiles(id) on delete cascade,
  scope text not null, -- e.g., 'photo_sharing','teaching_use','data_retention'
  status text check (status in ('granted','revoked')) not null,
  recorded_at timestamptz not null default now()
);

create table if not exists public.audit_log (
  id bigint generated by default as identity primary key,
  actor_id uuid references public.profiles(id),
  action text not null,
  resource text not null,
  meta jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default now()
);

-- Indexes
create index if not exists idx_checkins_patient_created on public.checkins (patient_id, created_at desc);

-- RLS policies
alter table public.care_bundles enable row level security;
alter table public.bundle_steps enable row level security;
alter table public.checkins enable row level security;
alter table public.consents enable row level security;
alter table public.audit_log enable row level security;

drop policy if exists care_bundles_rw_doctor on public.care_bundles;
create policy care_bundles_rw_doctor on public.care_bundles
  for all using (exists (select 1 from public.profiles p where p.id = auth.uid() and p.category = 'doctor'))
  with check (exists (select 1 from public.profiles p where p.id = auth.uid() and p.category = 'doctor'));

drop policy if exists bundle_steps_rw_doctor on public.bundle_steps;
create policy bundle_steps_rw_doctor on public.bundle_steps
  for all using (exists (select 1 from public.profiles p where p.id = auth.uid() and p.category = 'doctor'))
  with check (exists (select 1 from public.profiles p where p.id = auth.uid() and p.category = 'doctor'));

drop policy if exists checkins_access on public.checkins;
create policy checkins_access on public.checkins
  for select using (auth.uid() = patient_id or auth.uid() = doctor_id);
create policy checkins_insert_patient on public.checkins
  for insert with check (auth.uid() = patient_id);
create policy checkins_insert_doctor on public.checkins
  for insert with check (auth.uid() = doctor_id);
create policy checkins_delete_doctor on public.checkins
  for delete using (auth.uid() = doctor_id);

drop policy if exists consents_rw_patient on public.consents;
create policy consents_rw_patient on public.consents
  for all using (auth.uid() = patient_id)
  with check (auth.uid() = patient_id);

drop policy if exists audit_log_ro on public.audit_log;
create policy audit_log_ro on public.audit_log for select using (true);
